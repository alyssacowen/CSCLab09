
import java.util.Arrays;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author MoaathAlrajab
 */
public class Homework09 {
    
    // ToDo 01:  Write an algorithm to solve the following problem
    /*
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over one hundred divisors?
    
    */
    public static void main(String[] args) {
        int n = 1;
        int triNumber = 0;
        int triNumDivisors = 0;
        while (triNumDivisors <= 100){
            triNumber=getTriNumber(n);
            triNumDivisors = getTriNumDivisors(triNumber);
            n++;
        }
        System.out.println("The first triangle number to have over 100 divisors is: " + triNumber + ". " + triNumber + " has " + triNumDivisors + " which are: " + Arrays.toString(listofDivisors(triNumber)));
    }
     
   public static int getTriNumber(int n){
      return n * (n + 1)/2;
   
       }
   public static int getTriNumDivisors(int n){
        int count = 0;
        for(int i = 1; i <= Math.sqrt(n); i++){
            if (n%i == 0){
                count++;
                if(n/i!=i){
                    count++;
                }
            }
        }
        return count;
   }
public static int[] listofDivisors(int n){
    int[] divisors = new int[n]; // Assuming the maximum possible number of divisors is 'num'
    int count = 0; // To keep track of the number of divisors
    for (int i = 1; i <= Math.sqrt(n); i++) {
    if (n%i==0) {
            divisors[count++] = i;
            if (n / i != i) {
                divisors[count++] = n / i;
            }
        }
    }
    
    int[] result = new int[count]; // this will store only the actual divisors
    System.arraycopy(divisors, 0, result, 0, count); // copying to new array
    
    return result;

            }
        }
    
    



